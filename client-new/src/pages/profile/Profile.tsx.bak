import React, { useState, FormEvent, useEffect } from 'react';
import { useAuth } from '../../contexts/AuthContext';

const Profile: React.FC = () => {
  const { user, updateUserProfile, changePassword } = useAuth();
  const [activeTab, setActiveTab] = useState('profile');
  const [editMode, setEditMode] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [notification, setNotification] = useState<{ type: 'success' | 'error' | ''; message: string }>({ type: '', message: '' });
  const [formData, setFormData] = useState({
    firstName: user?.firstName || '',
    lastName: user?.lastName || '',
    position: user?.position || '',
    department: user?.department || ''
  });
  
  // Estados para cambio de contraseña
  const [passwordData, setPasswordData] = useState({
    currentPassword: '',
    newPassword: '',
    confirmPassword: ''
  });
  const [showCurrentPassword, setShowCurrentPassword] = useState(false);
  const [showNewPassword, setShowNewPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  
  // Estados para validación visual de la contraseña
  const [hasMinLength, setHasMinLength] = useState(false);
  const [hasUpperCase, setHasUpperCase] = useState(false);
  const [hasLowerCase, setHasLowerCase] = useState(false);
  const [hasNumber, setHasNumber] = useState(false);
  const [hasSpecialChar, setHasSpecialChar] = useState(false);
  const [passwordsMatch, setPasswordsMatch] = useState(false);
  
  // Reset form data when user changes or edit mode is toggled
  useEffect(() => {
    if (user) {
      setFormData({
        firstName: user.firstName || '',
        lastName: user.lastName || '',
        position: user.position || '',
        department: user.department || ''
      });
    }
  }, [user, editMode]);
  
  // Clear notification after 5 seconds
  useEffect(() => {
    if (notification.type) {
      const timer = setTimeout(() => {
        setNotification({ type: '', message: '' });
      }, 5000);
      return () => clearTimeout(timer);
    }
  }, [notification]);

  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setFormData({ ...formData, [event.target.name]: event.target.value });
  };
  
  // Función para manejar cambios en los campos de contraseña
  const handlePasswordChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = event.target;
    setPasswordData({ ...passwordData, [name]: value });
    
    // Validación en tiempo real de la nueva contraseña
    if (name === 'newPassword') {
      validatePassword(value);
    }
    
    // Validar coincidencia de contraseñas
    if (name === 'confirmPassword' || name === 'newPassword') {
      setPasswordsMatch(
        passwordData.newPassword === value || 
        (name === 'newPassword' && passwordData.confirmPassword === value)
      );
    }
  };
  
  // Función para validar requisitos de la contraseña en tiempo real
  const validatePassword = (password: string) => {
    setHasMinLength(password.length >= 8);
    setHasUpperCase(/[A-Z]/.test(password));
    setHasLowerCase(/[a-z]/.test(password));
    setHasNumber(/[0-9]/.test(password));
    setHasSpecialChar(/[@$!%*?&#]/.test(password));
  };

  const validateForm = (): boolean => {
    if (!formData.firstName.trim()) {
      setNotification({ type: 'error', message: 'El nombre es obligatorio' });
      return false;
    }
    if (!formData.lastName.trim()) {
      setNotification({ type: 'error', message: 'El apellido es obligatorio' });
      return false;
    }
    return true;
  };

  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    
    if (!validateForm()) {
      return;
    }
    
    setIsLoading(true);
    try {
      await updateUserProfile(formData);
      setNotification({ type: 'success', message: 'Perfil actualizado con éxito' });
      setEditMode(false);
    } catch (error) {
      setNotification({ type: 'error', message: 'Error al actualizar el perfil. Inténtalo de nuevo.' });
    } finally {
      setIsLoading(false);
    }
  };
  
  // Validar formulario de cambio de contraseña
  const validatePasswordForm = (): boolean => {
    if (!passwordData.currentPassword.trim()) {
      setNotification({ type: 'error', message: 'La contraseña actual es obligatoria' });
      return false;
    }
    
    if (!passwordData.newPassword.trim()) {
      setNotification({ type: 'error', message: 'La nueva contraseña es obligatoria' });
      return false;
    }
    
    if (passwordData.newPassword.length < 8) {
      setNotification({ type: 'error', message: 'La contraseña debe tener al menos 8 caracteres' });
      return false;
    }
    
    if (!hasUpperCase) {
      setNotification({ type: 'error', message: 'La contraseña debe contener al menos una letra mayúscula' });
      return false;
    }
    
    if (!hasLowerCase) {
      setNotification({ type: 'error', message: 'La contraseña debe contener al menos una letra minúscula' });
      return false;
    }
    
    if (!hasNumber) {
      setNotification({ type: 'error', message: 'La contraseña debe contener al menos un número' });
      return false;
    }
    
    if (!hasSpecialChar) {
      setNotification({ type: 'error', message: 'La contraseña debe contener al menos un carácter especial (@$!%*?&#)' });
      return false;
    }
    
    if (passwordData.newPassword !== passwordData.confirmPassword) {
      setNotification({ type: 'error', message: 'Las contraseñas no coinciden' });
      return false;
    }
    
    return true;
  };
  
  // Manejar envío del formulario de cambio de contraseña
  const handlePasswordSubmit = async (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    
    if (!validatePasswordForm()) {
      return;
    }
    
    setIsLoading(true);
    try {
      // Llamar al servicio de cambio de contraseña
      const result = await changePassword(
        passwordData.currentPassword,
        passwordData.newPassword,
        passwordData.confirmPassword
      );
      
      // Mostrar notificación de éxito con un mensaje más claro
      setNotification({ 
        type: 'success', 
        message: '¡Contraseña actualizada con éxito! Se ha enviado un correo electrónico de confirmación.'
      });
      
      // Limpiar el formulario después de un cambio exitoso
      setPasswordData({
        currentPassword: '',
        newPassword: '',
        confirmPassword: ''
      });
      
      // Resetear validaciones
      setHasMinLength(false);
      setHasUpperCase(false);
      setHasLowerCase(false);
      setHasNumber(false);
      setHasSpecialChar(false);
      setPasswordsMatch(false);
      
      // Desplazarse al inicio de la página para mostrar la notificación
      window.scrollTo({ top: 0, behavior: 'smooth' });
      
    } catch (error: any) {
      // Mejorar el mensaje de error con más detalle cuando sea posible
      const errorMessage = error.response?.data?.detail || 
                         error.response?.data?.message || 
                         'Error al actualizar la contraseña. Verifique su contraseña actual.';
      setNotification({ type: 'error', message: errorMessage });
      
      // Desplazarse al inicio de la página para mostrar la notificación de error
      window.scrollTo({ top: 0, behavior: 'smooth' });
    } finally {
      setIsLoading(false);
    }
  };

const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
  setFormData({ ...formData, [event.target.name]: event.target.value });
};

// Función para manejar cambios en los campos de contraseña
const handlePasswordChange = (event: React.ChangeEvent<HTMLInputElement>) => {
  const { name, value } = event.target;
  setPasswordData({ ...passwordData, [name]: value });

  // Validación en tiempo real de la nueva contraseña
  if (name === 'newPassword') {
    validatePassword(value);
  }

  // Validar coincidencia de contraseñas
  if (name === 'confirmPassword' || name === 'newPassword') {
    setPasswordsMatch(
      passwordData.newPassword === value || 
      (name === 'newPassword' && passwordData.confirmPassword === value)
    );
  }
};

// Función para validar requisitos de la contraseña en tiempo real
const validatePassword = (password: string) => {
  setHasMinLength(password.length >= 8);
  setHasUpperCase(/[A-Z]/.test(password));
  setHasLowerCase(/[a-z]/.test(password));
  setHasNumber(/[0-9]/.test(password));
  setHasSpecialChar(/[@$!%*?&#]/.test(password));
};

const validateForm = (): boolean => {
  if (!formData.firstName.trim()) {
    setNotification({ type: 'error', message: 'El nombre es obligatorio' });
    return false;
  }
  if (!formData.lastName.trim()) {
    setNotification({ type: 'error', message: 'El apellido es obligatorio' });
    return false;
  }
  return true;
};

const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
  event.preventDefault();

  if (!validateForm()) {
    return;
  }

  setIsLoading(true);
  try {
    await updateUserProfile(formData);
    setNotification({ type: 'success', message: 'Perfil actualizado con éxito' });
    setEditMode(false);
  } catch (error) {
    setNotification({ type: 'error', message: 'Error al actualizar el perfil. Inténtalo de nuevo.' });
  } finally {
    setIsLoading(false);
  }
};

// Validar formulario de cambio de contraseña
const validatePasswordForm = (): boolean => {
  if (!passwordData.currentPassword.trim()) {
    setNotification({ type: 'error', message: 'La contraseña actual es obligatoria' });
    return false;
  }

  if (!passwordData.newPassword.trim()) {
    setNotification({ type: 'error', message: 'La nueva contraseña es obligatoria' });
    return false;
  }

  if (passwordData.newPassword.length < 8) {
    setNotification({ type: 'error', message: 'La contraseña debe tener al menos 8 caracteres' });
    return false;
  }

  if (!hasUpperCase) {
    setNotification({ type: 'error', message: 'La contraseña debe contener al menos una letra mayúscula' });
    return false;
  }

  if (!hasLowerCase) {
    setNotification({ type: 'error', message: 'La contraseña debe contener al menos una letra minúscula' });
    return false;
  }

  if (!hasNumber) {
    setNotification({ type: 'error', message: 'La contraseña debe contener al menos un número' });
    return false;
  }

  if (!hasSpecialChar) {
    setNotification({ type: 'error', message: 'La contraseña debe contener al menos un carácter especial (@$!%*?&#)' });
    return false;
  }

  if (passwordData.newPassword !== passwordData.confirmPassword) {
    setNotification({ type: 'error', message: 'Las contraseñas no coinciden' });
    return false;
  }

  return true;
};

// Manejar envío del formulario de cambio de contraseña
const handlePasswordSubmit = async (event: FormEvent<HTMLFormElement>) => {
  event.preventDefault();

  if (!validatePasswordForm()) {
    return;
  }

  setIsLoading(true);
  try {
    // Llamar al servicio de cambio de contraseña
    const result = await changePassword(
      passwordData.currentPassword,
      passwordData.newPassword,
      passwordData.confirmPassword
    );

    // Mostrar notificación de éxito con un mensaje más claro
    setNotification({ 
      type: 'success', 
      message: '¡Contraseña actualizada con éxito! Se ha enviado un correo electrónico de confirmación.'
    });

    // Limpiar el formulario después de un cambio exitoso
    setPasswordData({
      currentPassword: '',
      newPassword: '',
      confirmPassword: ''
    });

    // Resetear validaciones
    setHasMinLength(false);
    setHasUpperCase(false);
    setHasLowerCase(false);
    setHasNumber(false);
    setHasSpecialChar(false);
    setPasswordsMatch(false);

    // Desplazarse al inicio de la página para mostrar la notificación
    window.scrollTo({ top: 0, behavior: 'smooth' });

  } catch (error: any) {
    // Mejorar el mensaje de error con más detalle cuando sea posible
    const errorMessage = error.response?.data?.detail || 
                       error.response?.data?.message || 
                       'Error al actualizar la contraseña. Verifique su contraseña actual.';
    setNotification({ type: 'error', message: errorMessage });

    // Desplazarse al inicio de la página para mostrar la notificación de error
    window.scrollTo({ top: 0, behavior: 'smooth' });
  } finally {
    setIsLoading(false);
  }
};

return (
  <div className="py-6 px-4 sm:px-6 lg:px-8">
    {notification.type && (
      <div className={`mb-4 p-4 rounded-md ${notification.type === 'success' ? 'bg-green-50 text-green-800' : 'bg-red-50 text-red-800'}`}>
        <div className="flex">
          <div className="flex-shrink-0">
            {notification.type === 'success' ? (
              <svg className="h-5 w-5 text-green-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
              </svg>
            ) : (
              <svg className="h-5 w-5 text-red-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
              </svg>
            )}
          </div>
          <div className="ml-3">
            <p className="text-sm font-medium">{notification.message}</p>
          </div>
          <div className="ml-auto pl-3">
            <div className="-mx-1.5 -my-1.5">
              <button
                onClick={() => setNotification({ type: '', message: '' })}
                className="inline-flex rounded-md p-1.5 text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
              >
                <span className="sr-only">Cerrar</span>
                <svg className="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                </svg>
              </button>
            </div>
          </div>
                  <span className="sr-only">Cerrar</span>
                  <svg className="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                  </svg>
                ) : (
                  <svg className="h-5 w-5 text-red-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                  </svg>
                )}
              </div>
              <div className="ml-3">
                <p className="text-sm font-medium">{notification.message}</p>
          <nav className="-mb-px flex" aria-label="Tabs">
            <button
              onClick={() => setActiveTab('profile')}
              className={`${
                activeTab === 'profile'
                  ? 'border-indigo-500 text-indigo-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              } whitespace-nowrap py-4 px-6 border-b-2 font-medium text-sm`}
            >
              Información Personal
            </button>
            <button
              onClick={() => setActiveTab('security')}
              className={`${
                activeTab === 'security'
                  ? 'border-indigo-500 text-indigo-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              } whitespace-nowrap py-4 px-6 border-b-2 font-medium text-sm`}
            >
              Seguridad
            </button>
            <button
              onClick={() => setActiveTab('notifications')}
              className={`${
                activeTab === 'notifications'
                  ? 'border-indigo-500 text-indigo-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              } whitespace-nowrap py-4 px-6 border-b-2 font-medium text-sm`}
            >
              Notificaciones
            </button>
            <button
              onClick={() => setActiveTab('activity')}
              className={`${
                activeTab === 'activity'
                  ? 'border-indigo-500 text-indigo-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              } whitespace-nowrap py-4 px-6 border-b-2 font-medium text-sm`}
            >
              Actividad de la Cuenta
            </button>
          </nav>
        </div>

        <div className="p-6">
          {activeTab === 'profile' && (
            <div>
              <div className="mb-6">
                <div className="flex items-center justify-between">
                  <div className="flex items-center">
                    <div className="h-20 w-20 rounded-full bg-indigo-100 flex items-center justify-center text-indigo-600 text-2xl font-bold">
                      {user?.firstName ? user.firstName.charAt(0).toUpperCase() : 'U'}
                    </div>
                    <div className="ml-6">
                      <h3 className="text-lg font-medium text-gray-900">
                        {user?.firstName || user?.name || 'Usuario'} {user?.lastName || ''}
                      </h3>
                      <p className="text-sm text-gray-500">{user?.email || 'email@ejemplo.com'}</p>
                    </div>
                  </div>
                  <div>
                    <button
                      type="button"
                      onClick={() => setEditMode(!editMode)}
                      className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                    >
                      {editMode ? 'Cancelar edición' : 'Editar perfil'}
                    </button>
                  </div>
                </div>
              </div>

              {!editMode ? (
                <div className="space-y-6 bg-gray-50 p-6 rounded-lg">
                  <div>
                    <h4 className="text-lg font-medium text-gray-900 mb-4">Información Personal</h4>
                    <div className="space-y-4">
                      <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
                        <div>
                          <p className="text-sm font-medium text-gray-500">Nombre:</p>
                          <p className="text-base text-gray-900">{user?.firstName || 'No especificado'}</p>
                        </div>
                        <div>
                          <p className="text-sm font-medium text-gray-500">Apellido:</p>
                          <p className="text-base text-gray-900">{user?.lastName || 'No especificado'}</p>
                        </div>
                      </div>
                      <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
                        <div>
                          <p className="text-sm font-medium text-gray-500">Correo electrónico:</p>
                          <p className="text-base text-gray-900">{user?.email || 'No especificado'}</p>
                        </div>
                        <div>
                          <p className="text-sm font-medium text-gray-500">Cargo:</p>
                          <p className="text-base text-gray-900">{user?.position || 'No especificado'}</p>
                        </div>
                      </div>
                      <div>
                        <p className="text-sm font-medium text-gray-500">Departamento:</p>
                        <p className="text-base text-gray-900">{user?.department || 'No especificado'}</p>
                      </div>
                    </div>
                  </div>
                </div>
              ) : (
                <form onSubmit={handleSubmit} className="space-y-6">
                  <div>
                    <h4 className="text-sm font-medium text-gray-900">Información Personal</h4>
                    <div className="mt-4 grid grid-cols-1 gap-6 sm:grid-cols-2">
                      <div>
                        <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
                          <div>
                            <label htmlFor="firstName" className="block text-sm font-medium text-gray-700">
                              Nombre
                            </label>
                            <input
                              type="text"
                              name="firstName"
                              id="firstName"
                              className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                              value={formData.firstName}
                              onChange={handleChange}
                            />
                          </div>
                          <div>
                            <label htmlFor="lastName" className="block text-sm font-medium text-gray-700">
                              Apellido
                            </label>
                            <input
                              type="text"
                              name="lastName"
                              id="lastName"
                              className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                              value={formData.lastName}
                              onChange={handleChange}
                            />
                          </div>
                        </div>
                      </div>
                      <div>
                        <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                          Correo Electrónico
                        </label>
                        <input
                          type="email"
                          name="email"
                          id="email"
                          disabled
                          className="mt-1 block w-full border-gray-300 rounded-md shadow-sm bg-gray-50 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                          defaultValue={user?.email || ''}
                        />
                      </div>
                      <div>
                        <label htmlFor="position" className="block text-sm font-medium text-gray-700">
                          Cargo
                        </label>
                        <input
                          type="text"
                          name="position"
                          id="position"
                          className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                          placeholder="Ej. Gerente de Proyectos"
                          value={formData.position}
                          onChange={handleChange}
                        />
                      </div>
                      <div>
                        <label htmlFor="department" className="block text-sm font-medium text-gray-700">
                          Departamento
                        </label>
                        <input
                          type="text"
                          name="department"
                          id="department"
                          className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                          placeholder="Ej. Tecnología"
                          value={formData.department}
                          onChange={handleChange}
                        />
                      </div>
                    </div>
                  </div>

                  <div className="pt-5">
                    <div className="flex justify-end">
                      <button
                        type="button"
                        onClick={() => setEditMode(false)}
                        className="bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                      >
                        Cancelar
                      </button>
                      <button
                        type="submit"
                        disabled={isLoading}
                        className={`ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white ${isLoading ? 'bg-indigo-400 cursor-not-allowed' : 'bg-indigo-600 hover:bg-indigo-700'} focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500`}
                      >
                        {isLoading ? (
                          <>
                            <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            Guardando...
                          </>
                        ) : 'Guardar'}
                      </button>
                    </div>
                  </div>
                </form>
              )}
            </div>
          )}

          {activeTab === 'security' && (
            <div>
              <div className="space-y-6">
                <div>
                  <h4 className="text-lg font-medium text-gray-900 mb-4">Cambiar Contraseña</h4>
                  <form onSubmit={handlePasswordSubmit} className="mt-4 grid grid-cols-1 gap-6">
                    {/* Contraseña Actual */}
                    <div>
                      <label htmlFor="currentPassword" className="block text-sm font-medium text-gray-700 mb-1">
                        Contraseña Actual
                      </label>
                      <div className="relative">
                        <input
                          type={showCurrentPassword ? 'text' : 'password'}
                          name="currentPassword"
                          id="currentPassword"
                          value={passwordData.currentPassword}
                          onChange={handlePasswordChange}
                          className="mt-1 block w-full pr-10 border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                          required
                        />
                        <button 
                          type="button"
                          className="absolute inset-y-0 right-0 flex items-center pr-3 mt-1"
                          onClick={() => setShowCurrentPassword(!showCurrentPassword)}
                        >
                          {showCurrentPassword ? (
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor">
                              <path fillRule="evenodd" d="M3.707 2.293a1 1 0 00-1.414 1.414l14 14a1 1 0 001.414-1.414l-1.473-1.473A10.014 10.014 0 0019.542 10C18.268 5.943 14.478 3 10 3a9.958 9.958 0 00-4.512 1.074l-1.78-1.781zm4.261 4.26l1.514 1.515a2.003 2.003 0 012.45 2.45l1.514 1.514a4 4 0 00-5.478-5.478z" clipRule="evenodd" />
                              <path d="M12.454 16.697L9.75 13.992a4 4 0 01-3.742-3.741L2.335 6.578A9.98 9.98 0 00.458 10c1.274 4.057 5.065 7 9.542 7 .847 0 1.669-.105 2.454-.303z" />
                            </svg>
                          ) : (
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor">
                              <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                              <path fillRule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clipRule="evenodd" />
                            </svg>
                          )}
                        </button>
                      </div>
                    </div>
                    
                    {/* Nueva Contraseña */}
                    <div>
                      <label htmlFor="newPassword" className="block text-sm font-medium text-gray-700 mb-1">
                        Nueva Contraseña
                      </label>
                      <div className="relative">
                        <input
                          type={showNewPassword ? 'text' : 'password'}
                          name="newPassword"
                          id="newPassword"
                          value={passwordData.newPassword}
                          onChange={handlePasswordChange}
                          className="mt-1 block w-full pr-10 border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                          required
                        />
                        <button 
                          type="button"
                          className="absolute inset-y-0 right-0 flex items-center pr-3 mt-1"
                          onClick={() => setShowNewPassword(!showNewPassword)}
                        >
                          {showNewPassword ? (
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor">
                              <path fillRule="evenodd" d="M3.707 2.293a1 1 0 00-1.414 1.414l14 14a1 1 0 001.414-1.414l-1.473-1.473A10.014 10.014 0 0019.542 10C18.268 5.943 14.478 3 10 3a9.958 9.958 0 00-4.512 1.074l-1.78-1.781zm4.261 4.26l1.514 1.515a2.003 2.003 0 012.45 2.45l1.514 1.514a4 4 0 00-5.478-5.478z" clipRule="evenodd" />
                              <path d="M12.454 16.697L9.75 13.992a4 4 0 01-3.742-3.741L2.335 6.578A9.98 9.98 0 00.458 10c1.274 4.057 5.065 7 9.542 7 .847 0 1.669-.105 2.454-.303z" />
                            </svg>
                          ) : (
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor">
                              <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                              <path fillRule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clipRule="evenodd" />
                            </svg>
                          )}
                        </button>
                      </div>
                      
                      {/* Requisitos de la contraseña */}
                      <div className="mt-3 bg-gray-50 p-3 rounded-md border border-gray-200">
                        <p className="text-xs font-medium text-gray-500 mb-2">La contraseña debe cumplir los siguientes requisitos:</p>
                        <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
                          <div className={`flex items-center ${hasMinLength ? 'text-green-600' : 'text-gray-500'}`}>
                            <svg className="h-4 w-4 mr-1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                              {hasMinLength ? (
                                <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                              ) : (
                                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z" clipRule="evenodd" />
                              )}
                            </svg>
                            <span className="text-xs">Al menos 8 caracteres</span>
                          </div>
                          <div className={`flex items-center ${hasUpperCase ? 'text-green-600' : 'text-gray-500'}`}>
                            <svg className="h-4 w-4 mr-1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                              {hasUpperCase ? (
                                <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                              ) : (
                                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z" clipRule="evenodd" />
                              )}
                            </svg>
                            <span className="text-xs">Al menos 1 mayúscula</span>
                          </div>
                          <div className={`flex items-center ${hasLowerCase ? 'text-green-600' : 'text-gray-500'}`}>
                            <svg className="h-4 w-4 mr-1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                              {hasLowerCase ? (
                                <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                              ) : (
                                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z" clipRule="evenodd" />
                              )}
                            </svg>
                            <span className="text-xs">Al menos 1 minúscula</span>
                          </div>
                          <div className={`flex items-center ${hasNumber ? 'text-green-600' : 'text-gray-500'}`}>
                            <svg className="h-4 w-4 mr-1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                              {hasNumber ? (
                                <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                              ) : (
                                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z" clipRule="evenodd" />
                              )}
                            </svg>
                            <span className="text-xs">Al menos 1 número</span>
                          </div>
                          <div className={`flex items-center ${hasSpecialChar ? 'text-green-600' : 'text-gray-500'}`}>
                            <svg className="h-4 w-4 mr-1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                              {hasSpecialChar ? (
                                <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                              ) : (
                                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z" clipRule="evenodd" />
                              )}
                            </svg>
                            <span className="text-xs">Al menos 1 carácter especial (@$!%*?&#)</span>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    {/* Confirmar Nueva Contraseña */}
                    <div>
                      <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700 mb-1">
                        Confirmar Nueva Contraseña
                      </label>
                      <div className="relative">
                        <input
                          type={showConfirmPassword ? 'text' : 'password'}
                          name="confirmPassword"
                          id="confirmPassword"
                          value={passwordData.confirmPassword}
                          onChange={handlePasswordChange}
                          className="mt-1 block w-full pr-10 border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                          required
                        />
                        <button 
                          type="button"
                          className="absolute inset-y-0 right-0 flex items-center pr-3 mt-1"
                          onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                        >
                          {showConfirmPassword ? (
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor">
                              <path fillRule="evenodd" d="M3.707 2.293a1 1 0 00-1.414 1.414l14 14a1 1 0 001.414-1.414l-1.473-1.473A10.014 10.014 0 0019.542 10C18.268 5.943 14.478 3 10 3a9.958 9.958 0 00-4.512 1.074l-1.78-1.781zm4.261 4.26l1.514 1.515a2.003 2.003 0 012.45 2.45l1.514 1.514a4 4 0 00-5.478-5.478z" clipRule="evenodd" />
                              <path d="M12.454 16.697L9.75 13.992a4 4 0 01-3.742-3.741L2.335 6.578A9.98 9.98 0 00.458 10c1.274 4.057 5.065 7 9.542 7 .847 0 1.669-.105 2.454-.303z" />
                            </svg>
                          ) : (
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor">
                              <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                              <path fillRule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clipRule="evenodd" />
                            </svg>
                          )}
                        </button>
                      </div>
                      
                      {passwordData.confirmPassword && passwordData.newPassword && (
                        <div className="mt-1">
                          {passwordsMatch ? (
                            <p className="text-xs text-green-600 flex items-center">
                              <svg className="h-4 w-4 mr-1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                              </svg>
                              Las contraseñas coinciden
                            </p>
                          ) : (
                            <p className="text-xs text-red-600 flex items-center">
                              <svg className="h-4 w-4 mr-1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                              </svg>
                              Las contraseñas no coinciden
                            </p>
                          )}
                        </div>
                      )}
                    </div>
                    
                    <div className="pt-5 flex justify-end">
                      <button
                        type="button"
                        onClick={() => {
                          setPasswordData({
                            currentPassword: '',
                            newPassword: '',
                            confirmPassword: ''
                          });
                          setHasMinLength(false);
                          setHasUpperCase(false);
                          setHasLowerCase(false);
                          setHasNumber(false);
                          setHasSpecialChar(false);
                          setPasswordsMatch(false);
                        }}
                        className="bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                      >
                        Cancelar
                      </button>
                      <button
                        type="submit"
                        disabled={isLoading}
                        className={`ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white ${isLoading ? 'bg-indigo-400 cursor-not-allowed' : 'bg-indigo-600 hover:bg-indigo-700'} focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500`}
                      >
                        {isLoading ? (
                          <>
                            <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            Actualizando...
                          </>
                        ) : 'Actualizar Contraseña'}
                      </button>
                    </div>
                  </form>
                </div>

                <div className="pt-6 mt-6 border-t border-gray-200">
                  <h4 className="text-lg font-medium text-gray-900 mb-4">Seguridad adicional</h4>
                  <div className="space-y-4">
                    <div className="bg-gray-50 p-4 rounded-md border border-gray-200">
                      <h5 className="text-sm font-medium text-gray-900">Autenticación de dos factores</h5>
                      <p className="text-sm text-gray-500 mt-1">Próximamente disponible para mayor seguridad.</p>
                    </div>
                    
                    <div className="bg-gray-50 p-4 rounded-md border border-gray-200">
                      <h5 className="text-sm font-medium text-gray-900">Sesiones activas</h5>
                      <p className="text-sm text-gray-500 mt-1">Próximamente podrás ver y cerrar tus sesiones activas.</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {activeTab === 'notifications' && (
            <div>
              <div className="space-y-6">
                <div>
                  <h4 className="text-sm font-medium text-gray-900">Preferencias de Notificaciones</h4>
                  <div className="mt-4 space-y-4">
                    <div className="flex items-start">
                      <div className="flex items-center h-5">
                        <input
                          id="comments"
                          name="comments"
                          type="checkbox"
                          className="focus:ring-indigo-500 h-4 w-4 text-indigo-600 border-gray-300 rounded"
                          defaultChecked
                        />
                      </div>
                      <div className="ml-3 text-sm">
                        <label htmlFor="comments" className="font-medium text-gray-700">
                          Notificaciones de solicitudes
                        </label>
                        <p className="text-gray-500">Recibir notificaciones cuando tus solicitudes sean aprobadas o rechazadas.</p>
                      </div>
                    </div>
                    <div className="flex items-start">
                      <div className="flex items-center h-5">
                        <input
                          id="meetings"
                          name="meetings"
                          type="checkbox"
                          className="focus:ring-indigo-500 h-4 w-4 text-indigo-600 border-gray-300 rounded"
                          defaultChecked
                        />
                      </div>
                      <div className="ml-3 text-sm">
                        <label htmlFor="meetings" className="font-medium text-gray-700">
                          Notificaciones de reuniones
                        </label>
                        <p className="text-gray-500">Recibir recordatorios sobre reuniones programadas.</p>
                      </div>
                    </div>
                    <div className="flex items-start">
                      <div className="flex items-center h-5">
                        <input
                          id="projects"
                          name="projects"
                          type="checkbox"
                          className="focus:ring-indigo-500 h-4 w-4 text-indigo-600 border-gray-300 rounded"
                        />
                      </div>
                      <div className="ml-3 text-sm">
                        <label htmlFor="projects" className="font-medium text-gray-700">
                          Notificaciones de proyectos
                        </label>
                        <p className="text-gray-500">Recibir notificaciones sobre actualizaciones en los proyectos.</p>
                      </div>
                    </div>
                  </div>
                </div>

                <div className="pt-5">
                  <div className="flex justify-end">
                    <button
                      type="button"
                      className="bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                    >
                      Cancelar
                    </button>
                    <button
                      type="submit"
                      className="ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                    >
                      Guardar Preferencias
                    </button>
                  </div>
                </div>
              </div>
            </div>
          )}

          {activeTab === 'activity' && (
            <div>
              <h4 className="text-sm font-medium text-gray-900 mb-4">Actividad Reciente</h4>
              <div className="flow-root">
                <ul className="-mb-8">
                  <li>
                    <div className="relative pb-8">
                      <span className="absolute top-4 left-4 -ml-px h-full w-0.5 bg-gray-200" aria-hidden="true"></span>
                      <div className="relative flex space-x-3">
                        <div>
                          <span className="h-8 w-8 rounded-full bg-gray-400 flex items-center justify-center ring-8 ring-white">
                            <svg className="h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                              <path fillRule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clipRule="evenodd" />
                            </svg>
                          </span>
                        </div>
                        <div className="min-w-0 flex-1 pt-1.5 flex justify-between space-x-4">
                          <div>
                            <p className="text-sm text-gray-500">
                              Inicio de sesión desde <span className="font-medium text-gray-900">Ciudad de México</span>
                            </p>
                          </div>
                          <div className="text-right text-sm whitespace-nowrap text-gray-500">
                            <time dateTime="2023-05-20T13:45:00">Hoy, 13:45</time>
                          </div>
                        </div>
                      </div>
                    </div>
                  </li>

                  <li>
                    <div className="relative pb-8">
                      <span className="absolute top-4 left-4 -ml-px h-full w-0.5 bg-gray-200" aria-hidden="true"></span>
                      <div className="relative flex space-x-3">
                        <div>
                          <span className="h-8 w-8 rounded-full bg-blue-500 flex items-center justify-center ring-8 ring-white">
                            <svg className="h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                              <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z" clipRule="evenodd" />
                            </svg>
                          </span>
                        </div>
                        <div className="min-w-0 flex-1 pt-1.5 flex justify-between space-x-4">
                          <div>
                            <p className="text-sm text-gray-500">
                              Perfil actualizado
                            </p>
                          </div>
                          <div className="text-right text-sm whitespace-nowrap text-gray-500">
                            <time dateTime="2023-05-18T10:30:00">18 May, 10:30</time>
                          </div>
                        </div>
                      </div>
                    </div>
                  </li>

                  <li>
                    <div className="relative pb-8">
                      <div className="relative flex space-x-3">
                        <div>
                          <span className="h-8 w-8 rounded-full bg-green-500 flex items-center justify-center ring-8 ring-white">
                            <svg className="h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                              <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                            </svg>
                          </span>
                        </div>
                        <div className="min-w-0 flex-1 pt-1.5 flex justify-between space-x-4">
                          <div>
                            <p className="text-sm text-gray-500">
                              Cuenta creada
                            </p>
                          </div>
                          <div className="text-right text-sm whitespace-nowrap text-gray-500">
                            <time dateTime="2023-05-10T09:15:00">10 May, 09:15</time>
                          </div>
                        </div>
                      </div>
                    </div>
                  </li>
                </ul>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Profile;